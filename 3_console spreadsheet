#include <bits/stdc++.h>
#include <sstream>
using namespace std;

int precedence(char op){
    if(op == '+'||op == '-')
      return 1;
    if(op == '*'||op == '/')
      return 2;
    return 0;
}

int applyOp(int a, int b, char op){
    switch(op){
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
        case '/': return a / b;
    }
}

 

int evaluate(string tokens){
    int i;
    stack <int> values;
    stack <char> ops;
    for(i = 0; i < tokens.length(); i++){
        if(tokens[i] == ' ')
            continue;
        if(tokens[i] == '('){
            ops.push(tokens[i]);
        }
        else if(isdigit(tokens[i])){
            int val = 0;
            while(i < tokens.length() &&
                        isdigit(tokens[i]))
            {
                val = (val*10) + (tokens[i]-'0');
                i++;
            }           
            values.push(val);
              i--;
        }
        else if(tokens[i] == ')')
        {
            while(!ops.empty() && ops.top() != '(')
            {
                int val2 = values.top();
                values.pop();                
                int val1 = values.top();
                values.pop();                 
                char op = ops.top();
                ops.pop();                 
                values.push(applyOp(val1, val2, op));
            }
            if(!ops.empty())
               ops.pop();
        }
        else
        {
            while(!ops.empty() && precedence(ops.top()) >= precedence(tokens[i])){
                int val2 = values.top();
                values.pop();                 
                int val1 = values.top();
                values.pop();               
                char op = ops.top();
                ops.pop();                
                values.push(applyOp(val1, val2, op));
            }
           ops.push(tokens[i]);
        }
    }

    while(!ops.empty()){
        int val2 = values.top();
        values.pop();                
        int val1 = values.top();
        values.pop();                 
        char op = ops.top();
        ops.pop();                 
        values.push(applyOp(val1, val2, op));
    }
    return values.top();
}


int main() {
    int row,col;
    cout << "Enter the number of rows : " ;
    cin >> row;
    cout << "Enter the number of Columns : ";
    cin >> col;
    string spreadSheet[row][col];
    for (int i=0;i<row;i++) {
        for (int j=0;j<col;j++) {
            cout << "Entering data for cell " << i << j <<"\n";
            cout << "Press 1 to omit cell\nPress 2 to enter value\nPress 3 to enter formula\n" ;
            int choice;
            cin >> choice;
            string input;
            switch(choice) {
                case 1 : spreadSheet[i][j] = " ";
                         break;
                case 2 : cin >> spreadSheet[i][j];
                         break;
                case 3 : cin >> input;
                         int k = 1;
                         string expr = "";
                         while (k < input.length()) {
                            if (input[k]>='A' && input[k]<='Z') {
                                int r = input[k]-'A';
                                int c = input[k+1]-'0'-1;
                                if(spreadSheet[r][c] == " ") {
                                    spreadSheet[i][j] = "#NAN";
                                    break;
                                } else {
                                    expr+=spreadSheet[r][c];
                                }
                                k++;
                            } else {
                                expr += input[k];
                            } 
                            k++;
                         }
                         if (k == input.length()) {
                             spreadSheet[i][j] = evaluate(expr);
                         }
                         break;
            }
        }
    }
     for (int i=0;i<row;i++) {
        for (int j=0;j<col;j++) {
            cout << spreadSheet[i][j] << "\t";
        }
        cout << "\n" ;
     }
    return 0;
}
